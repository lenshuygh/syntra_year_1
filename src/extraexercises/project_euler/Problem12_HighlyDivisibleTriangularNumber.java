package extraexercises.project_euler;

public class Problem12_HighlyDivisibleTriangularNumber {
    /*
            The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

            Let us list the factors of the first seven triangle numbers:

                 1: 1
                 3: 1,3
                 6: 1,2,3,6
                10: 1,2,5,10
                15: 1,3,5,15
                21: 1,3,7,21
                28: 1,2,4,7,14,28

            We can see that 28 is the first triangle number to have over five divisors.

            What is the value of the first triangle number to have over five hundred divisors?
     */

    public static void main(String[] args) {
        int i = 0;
        long tNumber = 0L;
        int divisors = 0;
        do{
            i++;
            tNumber += i;
            divisors = calculateDivisors(tNumber);
            System.out.print(tNumber + " -> ");
            System.out.println(divisors);
        }while(divisors <= 500);
        System.out.println("result: " + tNumber);
    }

    private static int calculateDivisors(long tNumber) {
        int divisorCount = 0;
        long upperLimit = tNumber;
        long divisionResult = 0;
        for (int i = 1; i < upperLimit; i++) {
            if(tNumber % i == 0){
                divisorCount += 2;
                divisionResult = tNumber / i;
                upperLimit = divisionResult;
            }
        }
        return divisorCount;
    }
}
